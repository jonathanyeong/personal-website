---
import type { CollectionEntry } from 'astro:content';
import { Icon } from "astro-icon/components";
import BaseLayout from './BaseLayout.astro';
import FormattedDate from '../components/FormattedDate.astro';
import TopicList from '../components/TopicList.astro';

type Props = CollectionEntry<'blog'>['data']  & {minutesRead: string};

const { title, description, pubDate, updatedDate, heroImage, topics, minutesRead } = Astro.props;


const showUpdatedDate = () => {
    return updatedDate && updatedDate.getTime() !== pubDate.getTime()
}

const displayDate = showUpdatedDate() ? updatedDate : pubDate

---

<BaseLayout title={title} description={description} pubDate={pubDate.toISOString()}>
    <h1 class="title">
        {title}
    </h1>
    <p class="metadata">
        <FormattedDate date={displayDate} /> <Icon name="minus" /> {
            topics.map((topic: string) => (
                <a class="text-link" href={`/topics/${topic}/`}>#{topic.toLowerCase()}</a>
            ))
        }
    </p>

    <article>
        <slot />
    </article>
</BaseLayout>

<style>
  .title {
    font-family: Poppins, var(--font-base);
    font-weight: 700;
    font-size: var(--font-step-7);
    line-height: 100%;
    letter-spacing: -0.03em;
    margin-bottom: 0;
    margin-top: var(--space-2xl);
  }

  .metadata {
    display: flex;
    flex-direction: row;
    align-items: center;
    margin-top: 0;
    margin-bottom: var(--space-xl);
    font-weight: 700;
    font-size: calc(var(--font-step-0) * 0.95);
    gap: var(--space-2xs);
    opacity: 1;
  }

  a,
  article :global(a) {
    color: var(--color-text);
    font-weight: bold;
    text-decoration-line: underline;
    text-decoration-thickness: 2px;
    text-underline-offset: 0.4rem;
    text-decoration-style: dotted;
  }

  a:hover,
  article :global(a:hover) {
    opacity: 0.8;
  }

  article :global(li) {
    margin-bottom: var(--space-xs);
  }
</style>