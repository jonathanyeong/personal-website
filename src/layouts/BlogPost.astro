---
import type { CollectionEntry } from 'astro:content';
import { Icon } from "astro-icon/components";
import BaseLayout from './BaseLayout.astro';
import FormattedDate from '@components/FormattedDate.astro';
import Newsletter from '@components/Newsletter.astro';
import Comments from '@components/Comments.astro';

type Props = CollectionEntry<'blog'>['data']  & {minutesRead: string};

const { title, description, pubDate, updatedDate, heroImage, topics, minutesRead } = Astro.props;


const showUpdatedDate = () => {
    return updatedDate && updatedDate.getTime() !== pubDate.getTime()
}

const displayDate = showUpdatedDate() ? updatedDate : pubDate
const bskyPostId = "3lnbfato4i22d"
---

<script>
  // Thank you https://timneubauer.dev/blog/copy-code-button-in-astro/!
  // TODO: Use a symbol instead of text
  const copyButtonLabel = "Copy Code";
  const codeBlocks = Array.from(document.querySelectorAll("pre"));

  for (let codeBlock of codeBlocks) {
    let wrapper = document.createElement("div");
    wrapper.style.position = "relative";

    let copyButton = document.createElement("button");
    copyButton.className = "copy-code";
    copyButton.innerHTML = copyButtonLabel;

    codeBlock.setAttribute("tabindex", "0");
    codeBlock.appendChild(copyButton);
    // wrap codebock with relative parent element
    codeBlock.parentNode?.insertBefore(wrapper, codeBlock);
    wrapper.appendChild(codeBlock);

    copyButton.addEventListener("click", async () => {
      await copyCode(codeBlock, copyButton);
    });
  }

  async function copyCode(block: HTMLPreElement, button: HTMLButtonElement) {
    const code = block.querySelector("code");
    const text = code?.innerText;

    text && await navigator.clipboard.writeText(text);

    // visual feedback that task is completed
    button.innerText = "Copied!";{}

    setTimeout(() => {
      button.innerText = copyButtonLabel;
    }, 1000);
  }
</script>

<BaseLayout title={title} description={description} pubDate={pubDate.toISOString()}>
  <article class="wrapper flow">
    <h1 class="title">
        {title}
    </h1>
    <p class="metadata">
        <FormattedDate date={displayDate} /> <Icon name="minus" /> {
            topics.map((topic: string) => (
                <a class="text-link" href={`/topics/${topic}/`}>#{topic.toLowerCase()}</a>
            ))
        }
    </p>

    <slot />
    <hr />
    <Comments bskyPostId={bskyPostId} />
  </article>
  <Newsletter />
</BaseLayout>

<style>
  article {
    --gutter: var(--space-m);
    --wrapper-max-width: 70ch;

    margin-bottom: var(--space-3xl);
  }

  .title {
    font-family: Poppins, var(--font-base);
    font-weight: 700;
    font-size: var(--font-step-7);
    line-height: 100%;
    letter-spacing: -0.03em;

    margin-bottom: var(--space-xs);
    margin-top: var(--space-2xl);
    margin-left: auto;
    margin-right: auto;

    text-align: center;
    max-width: 25ch;
  }

  .metadata {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    margin-top: 0;
    margin-bottom: var(--space-xl);
    font-weight: 700;
    font-size: calc(var(--font-step-0) * 0.95);
    gap: var(--space-2xs);
    opacity: 1;
  }
  /* Revisit when I implement table of contents */
  /* article {
    @media screen and (min-width: 940px) {
        max-width: 80%;
        margin: 0 auto;
    }
  } */
</style>