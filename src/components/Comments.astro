<meta data-bsky-post-id="3lnbfato4i22d" />

<section class="post__likes" data-bsky-container>
  <h4 class="post__likesTitle">
    ðŸ¦‹ <span data-bsky-likes-count></span> likes on Bluesky
  </h4>
  <a class="post__likesCta" href="https://bsky.app/profile/jonathanyeong.com/post/3lnbfato4i22d" target="_blank">
	  Like this post on Bluesky to see your face here!
  </a>
  <ul data-bsky-likes class="post__likesList"></ul>
  <h4 class="post__commentsTitle">
    Comments
  </h4>
  <ul data-bsky-comments class="post__commentsList flow"></ul>
</section>

<script>
  const LIMIT = 55;

  const bskyPostId = document?.querySelector("[data-bsky-post-id]")?.dataset.bskyPostId;

  const container = document.querySelector("[data-bsky-container]");
  const likesContainer = document.querySelector("[data-bsky-likes]");
  const likesCount = document.querySelector("[data-bsky-likes-count]");
  const commentsContainer = document.querySelector("[data-bsky-comments]");

  const myDid = "did:plc:sypvcjg7jtlw2ivzumlcxto5";
  const bskyAPI = "https://public.api.bsky.app/xrpc/";
  const getLikesURL = `${bskyAPI}app.bsky.feed.getLikes?limit=${LIMIT}&uri=`;
  const getPostURL = `${bskyAPI}app.bsky.feed.getPosts?uris=`;
  const bskyPostComments = `${bskyAPI}app.bsky.feed.getPostThread?depth=1`;

  function drawHowManyMore(postLikesCount, likesActorLength) {
    if (postLikesCount > LIMIT) {
      const likesMore = document.createElement("li");
      likesMore.classList.add("post__like");
      likesMore.classList.add("post__like--howManyMore");
      likesMore.innerText = `+${postLikesCount - likesActorLength}`;
      likesContainer.appendChild(likesMore);
    }
  }

  function drawLikes(likesActors, postLikesCount) {
    for (const like of likesActors) {
      const likeEl = document.createElement("li");
      likeEl.classList.add("post__like");

      if (like.actor.avatar !== undefined) {
        likeEl.innerHTML = `
        <img class="post__like__avatar"
          src="${like.actor.avatar.replace("avatar", "avatar_thumbnail")}"
          alt="${like.actor.displayName}"
        />`;
      } else {
        likeEl.classList.add("post__like--placeholder");
        likeEl.innerHTML = `
          <span aria-label="${like.actor.displayName}">@</span>
        `;
      }
      likesContainer.appendChild(likeEl);
    }

    drawHowManyMore(postLikesCount, likesActors.length);
  }

  function atUriToBlueskyUrl(atUri, authorHandle) {
    const postId = atUri.split('/').pop();
    return `https://bsky.app/profile/${authorHandle}/post/${postId}`;
  }

  function drawComments(comments) {
    for (const comment of comments) {
      const commentEl = document.createElement("li");
      commentEl.classList.add("post__comment");
      console.log(comment)
      const postUrl = atUriToBlueskyUrl(comment.post.uri, comment.post.author.handle)
      commentEl.innerHTML = `
        <div class="post__comment__title">
          <img
            class="post__comment__avatar"
            src="${comment.post.author.avatar.replace("avatar", "avatar_thumbnail")}"
            alt="${comment.post.author.displayName}"
          />
          <span class="post__comment__titleAuthor">${comment.post.author.displayName}</span>
          <span class="post__comment__titleHandle">@${comment.post.author.handle}</span>
        </div>
        <p class="post__comment__body">${comment.post.record.text}</p>
        <a class="post__comment__viewCommentLink" href="${postUrl}" target="_blank">View on Bluesky</a>
      `
      commentsContainer?.appendChild(commentEl)
    }
  }

  if (bskyPostId !== "null") {
    const postUri = `at://${myDid}/app.bsky.feed.post/${bskyPostId}`;
    try {
      const bskyPost = await fetch(getPostURL + postUri);
      const bskyPostLikes = await fetch(getLikesURL + postUri);
      const bskyComments = await fetch(bskyPostComments + "&uri=" + postUri)
      const postData = await bskyPost.json();
      const likesData = await bskyPostLikes.json();
      const commentsData = await bskyComments.json();
      const totalLikesCount = postData.posts[0].likeCount;

      if (likesData.likes.length > 0) {
        likesCount.textContent = totalLikesCount;
        drawLikes(likesData.likes, totalLikesCount);
      }
      if (commentsData.thread.replies.length > 0) {
        drawComments(commentsData.thread.replies)
      }
    } catch (error) {
      container.remove();
    }
  }
</script>

<style is:global>
  .post__like__avatar,
  .post__comments__avatar {
    border-radius: 100%;
  }

  img.post__like__avatar,
  img.post__comments__avatar {
    width: auto;
    max-width: 100%;
    height: auto;
  }

  .post__likesList {
    list-style: none;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    padding: 0;
  }

  .post__like {
    width: 3rem;
    aspect-ratio: 1/1;
    margin-right: -1rem;
    filter: drop-shadow(rgba(0, 0, 0, 0.25) 0px 2px 2px);
  }

  .post__commentsList {
    --flow-space: var(--space-2xs);
    list-style: none;
    padding: 0;
  }

  .post__comment {
    border-radius: 1rem;
    background-color: var(--color-hero-bg);
    padding: var(--space-m) var(--space-s);
  }

  .post__comment__title {
    align-items: end;
    display: flex;
    flex-direction: row;
    gap: var(--space-2xs);
    margin-bottom: var(--space-xs);
  }

  .post__comment__avatar {
    max-width: var(--space-m);
    border-radius: 100%;
  }

  .post__comment__titleHandle {
    color: var(--color-hero-text);
  }

  .post__comment__body {
    margin-bottom: var(--space-xs);
  }

  .post__comment__viewCommentLink {
    font-size: 1.1rem;
  }

  .post__comment__titleAuthor {
    font-weight: 700;
  }

  .post__likesTitle,
  .post__commentsTitle {
    margin-block-end: var(--space-s);
  }
</style>